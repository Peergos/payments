<project name="Peergos Payment Server" default="dist" basedir=".">
  <description>
    Building Peergos payment server
  </description>

  <!-- Need to run "sudo apt-get install ant-optional" -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <fileset dir="ant.lib"/>
    </classpath>
  </taskdef>
  
  <property name="src" location="src"/>
  <property name="test.sources" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="test.reports" location="test.reports"/>
  <property name="timestamp.millis" value="1489731900000"/>

  <path id="dep.runtime">
    <fileset dir="./lib">
        <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="dep.build">
    <fileset dir="./lib-build">
        <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="project.class.path">
    <pathelement location="war/WEB-INF/classes"/>
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) here -->
    <pathelement location="lib-build/junit-4.11.jar"/>
    <pathelement location="lib-build/hamcrest-core-1.3.jar"/>
  </path>
  
  <target name="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${test.reports}"/>
  </target>

  <target name="compile" depends="clean, init"
        description="compile the source">
    <javac includeantruntime="false" destdir="${build}" debug="true" debuglevel="lines,vars,source">
      <src>
	<pathelement location="${src}"/>
      </src>
      <classpath>
	<fileset dir="lib">
          <include name="**/*.jar" />
        </fileset>
	<fileset dir="lib-build">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution">
    <mkdir dir="${dist}/lib"/>
    <copy todir="${dist}/lib">
      <fileset dir="lib"/>
    </copy>
    <manifestclasspath property="manifest_cp" jarfile="myjar.jar">
      <classpath refid="dep.runtime" />
    </manifestclasspath>
    <touch millis="${timestamp.millis}">
      <fileset dir="${build}"/>
    </touch>
    <jar jarfile="${dist}/PaymentServer.jar" basedir="${build}" includes="peergos/**"></jar>
    <mkdir dir="META-INF"/>
    <echo file="META-INF/MANIFEST.MF">Main-Class: peergos.payment.Server
        Class-Path: ${manifest_cp}</echo>
    <touch millis="0">
      <fileset dir="META-INF"/>
    </touch>
    <zip destfile="${dist}/PaymentServer.jar" basedir="." includes="META-INF/MANIFEST.MF" update="true"></zip>
    <delete dir="META-INF"/>
    <copy todir=".">
      <fileset file="${dist}/PaymentServer.jar"/>
    </copy>
  </target>

  <target name="test" depends="parallel_test">
  </target> 

  <target name="execute.test">
    <!-- we need to have relative path -->
    <pathconvert property="test.source.relative">
      <fileset file="${test.source.absolute}" />
      <map from="${test.sources}/" to="" />
    </pathconvert>
    <!-- run one particular test -->
    <junit fork="true" printsummary="true" haltonfailure="yes">
      <jvmarg value="-Xmx2g"/>
      <classpath>
	<pathelement location="lib/sqlite-jdbc-3.7.2.jar" />
	<pathelement location="lib-build/junit-4.11.jar" />
	<pathelement location="lib-build/hamcrest-core-1.3.jar" />
	<pathelement location="PaymentServer.jar" />
      </classpath>
      <formatter type="xml" />
      <batchtest todir="${test.reports}" skipNonTests="true">
	<fileset dir="${test.sources}">
          <filename name="${test.source.relative}" />
	</fileset>
      </batchtest>
    </junit>
  </target>

  <target name="parallel_test" depends="compile,dist">
    <for
	keepgoing="false"
	threadCount="1"
	parallel="true"
	param="test.source.absolute">
      <path>
	<fileset dir="${test.sources}">
	  <include name="peergos/payment/tests/*.java"/>
	</fileset>
      </path>
      <sequential>
	<antcall target="execute.test">
	  <param name="test.source.absolute" value="@{test.source.absolute}"/>
	</antcall>
      </sequential>
    </for>
  </target>
  
  <target name="clean" description="clean up">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${dist}"/>
    <delete dir="war"/>
  </target>
</project>
